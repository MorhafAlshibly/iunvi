// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/dashboard.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/MorhafAlshibly/iunvi/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DashboardServiceName is the fully-qualified name of the DashboardService service.
	DashboardServiceName = "api.DashboardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DashboardServiceCreateDashboardProcedure is the fully-qualified name of the DashboardService's
	// CreateDashboard RPC.
	DashboardServiceCreateDashboardProcedure = "/api.DashboardService/CreateDashboard"
	// DashboardServiceGetDashboardsProcedure is the fully-qualified name of the DashboardService's
	// GetDashboards RPC.
	DashboardServiceGetDashboardsProcedure = "/api.DashboardService/GetDashboards"
	// DashboardServiceGetDashboardProcedure is the fully-qualified name of the DashboardService's
	// GetDashboard RPC.
	DashboardServiceGetDashboardProcedure = "/api.DashboardService/GetDashboard"
	// DashboardServiceGetModelRunDashboardProcedure is the fully-qualified name of the
	// DashboardService's GetModelRunDashboard RPC.
	DashboardServiceGetModelRunDashboardProcedure = "/api.DashboardService/GetModelRunDashboard"
)

// DashboardServiceClient is a client for the api.DashboardService service.
type DashboardServiceClient interface {
	CreateDashboard(context.Context, *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error)
	GetDashboards(context.Context, *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error)
	GetDashboard(context.Context, *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error)
	GetModelRunDashboard(context.Context, *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error)
}

// NewDashboardServiceClient constructs a client for the api.DashboardService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDashboardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DashboardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dashboardServiceMethods := api.File_api_dashboard_proto.Services().ByName("DashboardService").Methods()
	return &dashboardServiceClient{
		createDashboard: connect.NewClient[api.CreateDashboardRequest, api.CreateDashboardResponse](
			httpClient,
			baseURL+DashboardServiceCreateDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("CreateDashboard")),
			connect.WithClientOptions(opts...),
		),
		getDashboards: connect.NewClient[api.GetDashboardsRequest, api.GetDashboardsResponse](
			httpClient,
			baseURL+DashboardServiceGetDashboardsProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetDashboards")),
			connect.WithClientOptions(opts...),
		),
		getDashboard: connect.NewClient[api.GetDashboardRequest, api.GetDashboardResponse](
			httpClient,
			baseURL+DashboardServiceGetDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetDashboard")),
			connect.WithClientOptions(opts...),
		),
		getModelRunDashboard: connect.NewClient[api.GetModelRunDashboardRequest, api.GetModelRunDashboardResponse](
			httpClient,
			baseURL+DashboardServiceGetModelRunDashboardProcedure,
			connect.WithSchema(dashboardServiceMethods.ByName("GetModelRunDashboard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dashboardServiceClient implements DashboardServiceClient.
type dashboardServiceClient struct {
	createDashboard      *connect.Client[api.CreateDashboardRequest, api.CreateDashboardResponse]
	getDashboards        *connect.Client[api.GetDashboardsRequest, api.GetDashboardsResponse]
	getDashboard         *connect.Client[api.GetDashboardRequest, api.GetDashboardResponse]
	getModelRunDashboard *connect.Client[api.GetModelRunDashboardRequest, api.GetModelRunDashboardResponse]
}

// CreateDashboard calls api.DashboardService.CreateDashboard.
func (c *dashboardServiceClient) CreateDashboard(ctx context.Context, req *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error) {
	return c.createDashboard.CallUnary(ctx, req)
}

// GetDashboards calls api.DashboardService.GetDashboards.
func (c *dashboardServiceClient) GetDashboards(ctx context.Context, req *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error) {
	return c.getDashboards.CallUnary(ctx, req)
}

// GetDashboard calls api.DashboardService.GetDashboard.
func (c *dashboardServiceClient) GetDashboard(ctx context.Context, req *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error) {
	return c.getDashboard.CallUnary(ctx, req)
}

// GetModelRunDashboard calls api.DashboardService.GetModelRunDashboard.
func (c *dashboardServiceClient) GetModelRunDashboard(ctx context.Context, req *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error) {
	return c.getModelRunDashboard.CallUnary(ctx, req)
}

// DashboardServiceHandler is an implementation of the api.DashboardService service.
type DashboardServiceHandler interface {
	CreateDashboard(context.Context, *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error)
	GetDashboards(context.Context, *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error)
	GetDashboard(context.Context, *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error)
	GetModelRunDashboard(context.Context, *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error)
}

// NewDashboardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDashboardServiceHandler(svc DashboardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dashboardServiceMethods := api.File_api_dashboard_proto.Services().ByName("DashboardService").Methods()
	dashboardServiceCreateDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceCreateDashboardProcedure,
		svc.CreateDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("CreateDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetDashboardsHandler := connect.NewUnaryHandler(
		DashboardServiceGetDashboardsProcedure,
		svc.GetDashboards,
		connect.WithSchema(dashboardServiceMethods.ByName("GetDashboards")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceGetDashboardProcedure,
		svc.GetDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("GetDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	dashboardServiceGetModelRunDashboardHandler := connect.NewUnaryHandler(
		DashboardServiceGetModelRunDashboardProcedure,
		svc.GetModelRunDashboard,
		connect.WithSchema(dashboardServiceMethods.ByName("GetModelRunDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.DashboardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DashboardServiceCreateDashboardProcedure:
			dashboardServiceCreateDashboardHandler.ServeHTTP(w, r)
		case DashboardServiceGetDashboardsProcedure:
			dashboardServiceGetDashboardsHandler.ServeHTTP(w, r)
		case DashboardServiceGetDashboardProcedure:
			dashboardServiceGetDashboardHandler.ServeHTTP(w, r)
		case DashboardServiceGetModelRunDashboardProcedure:
			dashboardServiceGetModelRunDashboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDashboardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDashboardServiceHandler struct{}

func (UnimplementedDashboardServiceHandler) CreateDashboard(context.Context, *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.DashboardService.CreateDashboard is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetDashboards(context.Context, *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.DashboardService.GetDashboards is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetDashboard(context.Context, *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.DashboardService.GetDashboard is not implemented"))
}

func (UnimplementedDashboardServiceHandler) GetModelRunDashboard(context.Context, *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.DashboardService.GetModelRunDashboard is not implemented"))
}
