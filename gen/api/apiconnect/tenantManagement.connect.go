// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/tenantManagement.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/MorhafAlshibly/iunvi/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantManagementServiceName is the fully-qualified name of the TenantManagementService service.
	TenantManagementServiceName = "api.TenantManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantManagementServiceCreateWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's CreateWorkspace RPC.
	TenantManagementServiceCreateWorkspaceProcedure = "/api.TenantManagementService/CreateWorkspace"
	// TenantManagementServiceGetWorkspacesProcedure is the fully-qualified name of the
	// TenantManagementService's GetWorkspaces RPC.
	TenantManagementServiceGetWorkspacesProcedure = "/api.TenantManagementService/GetWorkspaces"
	// TenantManagementServiceEditWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's EditWorkspace RPC.
	TenantManagementServiceEditWorkspaceProcedure = "/api.TenantManagementService/EditWorkspace"
)

// TenantManagementServiceClient is a client for the api.TenantManagementService service.
type TenantManagementServiceClient interface {
	CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error)
	GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error)
	EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error)
}

// NewTenantManagementServiceClient constructs a client for the api.TenantManagementService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantManagementServiceMethods := api.File_api_tenantManagement_proto.Services().ByName("TenantManagementService").Methods()
	return &tenantManagementServiceClient{
		createWorkspace: connect.NewClient[api.CreateWorkspaceRequest, api.CreateWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getWorkspaces: connect.NewClient[api.GetWorkspacesRequest, api.GetWorkspacesResponse](
			httpClient,
			baseURL+TenantManagementServiceGetWorkspacesProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetWorkspaces")),
			connect.WithClientOptions(opts...),
		),
		editWorkspace: connect.NewClient[api.EditWorkspaceRequest, api.EditWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceEditWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("EditWorkspace")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantManagementServiceClient implements TenantManagementServiceClient.
type tenantManagementServiceClient struct {
	createWorkspace *connect.Client[api.CreateWorkspaceRequest, api.CreateWorkspaceResponse]
	getWorkspaces   *connect.Client[api.GetWorkspacesRequest, api.GetWorkspacesResponse]
	editWorkspace   *connect.Client[api.EditWorkspaceRequest, api.EditWorkspaceResponse]
}

// CreateWorkspace calls api.TenantManagementService.CreateWorkspace.
func (c *tenantManagementServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// GetWorkspaces calls api.TenantManagementService.GetWorkspaces.
func (c *tenantManagementServiceClient) GetWorkspaces(ctx context.Context, req *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error) {
	return c.getWorkspaces.CallUnary(ctx, req)
}

// EditWorkspace calls api.TenantManagementService.EditWorkspace.
func (c *tenantManagementServiceClient) EditWorkspace(ctx context.Context, req *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error) {
	return c.editWorkspace.CallUnary(ctx, req)
}

// TenantManagementServiceHandler is an implementation of the api.TenantManagementService service.
type TenantManagementServiceHandler interface {
	CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error)
	GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error)
	EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error)
}

// NewTenantManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantManagementServiceHandler(svc TenantManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantManagementServiceMethods := api.File_api_tenantManagement_proto.Services().ByName("TenantManagementService").Methods()
	tenantManagementServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetWorkspacesHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetWorkspacesProcedure,
		svc.GetWorkspaces,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetWorkspaces")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceEditWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceEditWorkspaceProcedure,
		svc.EditWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("EditWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.TenantManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantManagementServiceCreateWorkspaceProcedure:
			tenantManagementServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetWorkspacesProcedure:
			tenantManagementServiceGetWorkspacesHandler.ServeHTTP(w, r)
		case TenantManagementServiceEditWorkspaceProcedure:
			tenantManagementServiceEditWorkspaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantManagementServiceHandler struct{}

func (UnimplementedTenantManagementServiceHandler) CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetWorkspaces is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.EditWorkspace is not implemented"))
}
