// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/tenantManagement.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/MorhafAlshibly/iunvi/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantManagementServiceName is the fully-qualified name of the TenantManagementService service.
	TenantManagementServiceName = "api.TenantManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantManagementServiceCreateWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's CreateWorkspace RPC.
	TenantManagementServiceCreateWorkspaceProcedure = "/api.TenantManagementService/CreateWorkspace"
	// TenantManagementServiceGetWorkspacesProcedure is the fully-qualified name of the
	// TenantManagementService's GetWorkspaces RPC.
	TenantManagementServiceGetWorkspacesProcedure = "/api.TenantManagementService/GetWorkspaces"
	// TenantManagementServiceEditWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's EditWorkspace RPC.
	TenantManagementServiceEditWorkspaceProcedure = "/api.TenantManagementService/EditWorkspace"
	// TenantManagementServiceGetUsersProcedure is the fully-qualified name of the
	// TenantManagementService's GetUsers RPC.
	TenantManagementServiceGetUsersProcedure = "/api.TenantManagementService/GetUsers"
	// TenantManagementServiceGetUserWorkspaceAssignmentProcedure is the fully-qualified name of the
	// TenantManagementService's GetUserWorkspaceAssignment RPC.
	TenantManagementServiceGetUserWorkspaceAssignmentProcedure = "/api.TenantManagementService/GetUserWorkspaceAssignment"
	// TenantManagementServiceAssignUserToWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's AssignUserToWorkspace RPC.
	TenantManagementServiceAssignUserToWorkspaceProcedure = "/api.TenantManagementService/AssignUserToWorkspace"
	// TenantManagementServiceGetRegistryTokenPasswordsProcedure is the fully-qualified name of the
	// TenantManagementService's GetRegistryTokenPasswords RPC.
	TenantManagementServiceGetRegistryTokenPasswordsProcedure = "/api.TenantManagementService/GetRegistryTokenPasswords"
	// TenantManagementServiceCreateRegistryTokenPasswordProcedure is the fully-qualified name of the
	// TenantManagementService's CreateRegistryTokenPassword RPC.
	TenantManagementServiceCreateRegistryTokenPasswordProcedure = "/api.TenantManagementService/CreateRegistryTokenPassword"
	// TenantManagementServiceGetImagesProcedure is the fully-qualified name of the
	// TenantManagementService's GetImages RPC.
	TenantManagementServiceGetImagesProcedure = "/api.TenantManagementService/GetImages"
	// TenantManagementServiceCreateInputSpecificationProcedure is the fully-qualified name of the
	// TenantManagementService's CreateInputSpecification RPC.
	TenantManagementServiceCreateInputSpecificationProcedure = "/api.TenantManagementService/CreateInputSpecification"
	// TenantManagementServiceCreateOutputSpecificationProcedure is the fully-qualified name of the
	// TenantManagementService's CreateOutputSpecification RPC.
	TenantManagementServiceCreateOutputSpecificationProcedure = "/api.TenantManagementService/CreateOutputSpecification"
	// TenantManagementServiceGetSpecificationsProcedure is the fully-qualified name of the
	// TenantManagementService's GetSpecifications RPC.
	TenantManagementServiceGetSpecificationsProcedure = "/api.TenantManagementService/GetSpecifications"
	// TenantManagementServiceGetSpecificationProcedure is the fully-qualified name of the
	// TenantManagementService's GetSpecification RPC.
	TenantManagementServiceGetSpecificationProcedure = "/api.TenantManagementService/GetSpecification"
	// TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure is the fully-qualified
	// name of the TenantManagementService's CreateLandingZoneSharedAccessSignature RPC.
	TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure = "/api.TenantManagementService/CreateLandingZoneSharedAccessSignature"
)

// TenantManagementServiceClient is a client for the api.TenantManagementService service.
type TenantManagementServiceClient interface {
	CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error)
	GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error)
	EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error)
	GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error)
	GetUserWorkspaceAssignment(context.Context, *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error)
	AssignUserToWorkspace(context.Context, *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error)
	GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error)
	CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error)
	GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error)
	CreateInputSpecification(context.Context, *connect.Request[api.CreateInputSpecificationRequest]) (*connect.Response[api.CreateInputSpecificationResponse], error)
	CreateOutputSpecification(context.Context, *connect.Request[api.CreateOutputSpecificationRequest]) (*connect.Response[api.CreateOutputSpecificationResponse], error)
	GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error)
	GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error)
	CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error)
}

// NewTenantManagementServiceClient constructs a client for the api.TenantManagementService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantManagementServiceMethods := api.File_api_tenantManagement_proto.Services().ByName("TenantManagementService").Methods()
	return &tenantManagementServiceClient{
		createWorkspace: connect.NewClient[api.CreateWorkspaceRequest, api.CreateWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getWorkspaces: connect.NewClient[api.GetWorkspacesRequest, api.GetWorkspacesResponse](
			httpClient,
			baseURL+TenantManagementServiceGetWorkspacesProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetWorkspaces")),
			connect.WithClientOptions(opts...),
		),
		editWorkspace: connect.NewClient[api.EditWorkspaceRequest, api.EditWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceEditWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("EditWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getUsers: connect.NewClient[api.GetUsersRequest, api.GetUsersResponse](
			httpClient,
			baseURL+TenantManagementServiceGetUsersProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		getUserWorkspaceAssignment: connect.NewClient[api.GetUserWorkspaceAssignmentRequest, api.GetUserWorkspaceAssignmentResponse](
			httpClient,
			baseURL+TenantManagementServiceGetUserWorkspaceAssignmentProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetUserWorkspaceAssignment")),
			connect.WithClientOptions(opts...),
		),
		assignUserToWorkspace: connect.NewClient[api.AssignUserToWorkspaceRequest, api.AssignUserToWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceAssignUserToWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("AssignUserToWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getRegistryTokenPasswords: connect.NewClient[api.GetRegistryTokenPasswordsRequest, api.GetRegistryTokenPasswordsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetRegistryTokenPasswordsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetRegistryTokenPasswords")),
			connect.WithClientOptions(opts...),
		),
		createRegistryTokenPassword: connect.NewClient[api.CreateRegistryTokenPasswordRequest, api.CreateRegistryTokenPasswordResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateRegistryTokenPasswordProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateRegistryTokenPassword")),
			connect.WithClientOptions(opts...),
		),
		getImages: connect.NewClient[api.GetImagesRequest, api.GetImagesResponse](
			httpClient,
			baseURL+TenantManagementServiceGetImagesProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetImages")),
			connect.WithClientOptions(opts...),
		),
		createInputSpecification: connect.NewClient[api.CreateInputSpecificationRequest, api.CreateInputSpecificationResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateInputSpecificationProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateInputSpecification")),
			connect.WithClientOptions(opts...),
		),
		createOutputSpecification: connect.NewClient[api.CreateOutputSpecificationRequest, api.CreateOutputSpecificationResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateOutputSpecificationProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateOutputSpecification")),
			connect.WithClientOptions(opts...),
		),
		getSpecifications: connect.NewClient[api.GetSpecificationsRequest, api.GetSpecificationsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetSpecificationsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecifications")),
			connect.WithClientOptions(opts...),
		),
		getSpecification: connect.NewClient[api.GetSpecificationRequest, api.GetSpecificationResponse](
			httpClient,
			baseURL+TenantManagementServiceGetSpecificationProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecification")),
			connect.WithClientOptions(opts...),
		),
		createLandingZoneSharedAccessSignature: connect.NewClient[api.CreateLandingZoneSharedAccessSignatureRequest, api.CreateLandingZoneSharedAccessSignatureResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateLandingZoneSharedAccessSignature")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantManagementServiceClient implements TenantManagementServiceClient.
type tenantManagementServiceClient struct {
	createWorkspace                        *connect.Client[api.CreateWorkspaceRequest, api.CreateWorkspaceResponse]
	getWorkspaces                          *connect.Client[api.GetWorkspacesRequest, api.GetWorkspacesResponse]
	editWorkspace                          *connect.Client[api.EditWorkspaceRequest, api.EditWorkspaceResponse]
	getUsers                               *connect.Client[api.GetUsersRequest, api.GetUsersResponse]
	getUserWorkspaceAssignment             *connect.Client[api.GetUserWorkspaceAssignmentRequest, api.GetUserWorkspaceAssignmentResponse]
	assignUserToWorkspace                  *connect.Client[api.AssignUserToWorkspaceRequest, api.AssignUserToWorkspaceResponse]
	getRegistryTokenPasswords              *connect.Client[api.GetRegistryTokenPasswordsRequest, api.GetRegistryTokenPasswordsResponse]
	createRegistryTokenPassword            *connect.Client[api.CreateRegistryTokenPasswordRequest, api.CreateRegistryTokenPasswordResponse]
	getImages                              *connect.Client[api.GetImagesRequest, api.GetImagesResponse]
	createInputSpecification               *connect.Client[api.CreateInputSpecificationRequest, api.CreateInputSpecificationResponse]
	createOutputSpecification              *connect.Client[api.CreateOutputSpecificationRequest, api.CreateOutputSpecificationResponse]
	getSpecifications                      *connect.Client[api.GetSpecificationsRequest, api.GetSpecificationsResponse]
	getSpecification                       *connect.Client[api.GetSpecificationRequest, api.GetSpecificationResponse]
	createLandingZoneSharedAccessSignature *connect.Client[api.CreateLandingZoneSharedAccessSignatureRequest, api.CreateLandingZoneSharedAccessSignatureResponse]
}

// CreateWorkspace calls api.TenantManagementService.CreateWorkspace.
func (c *tenantManagementServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// GetWorkspaces calls api.TenantManagementService.GetWorkspaces.
func (c *tenantManagementServiceClient) GetWorkspaces(ctx context.Context, req *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error) {
	return c.getWorkspaces.CallUnary(ctx, req)
}

// EditWorkspace calls api.TenantManagementService.EditWorkspace.
func (c *tenantManagementServiceClient) EditWorkspace(ctx context.Context, req *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error) {
	return c.editWorkspace.CallUnary(ctx, req)
}

// GetUsers calls api.TenantManagementService.GetUsers.
func (c *tenantManagementServiceClient) GetUsers(ctx context.Context, req *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// GetUserWorkspaceAssignment calls api.TenantManagementService.GetUserWorkspaceAssignment.
func (c *tenantManagementServiceClient) GetUserWorkspaceAssignment(ctx context.Context, req *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error) {
	return c.getUserWorkspaceAssignment.CallUnary(ctx, req)
}

// AssignUserToWorkspace calls api.TenantManagementService.AssignUserToWorkspace.
func (c *tenantManagementServiceClient) AssignUserToWorkspace(ctx context.Context, req *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error) {
	return c.assignUserToWorkspace.CallUnary(ctx, req)
}

// GetRegistryTokenPasswords calls api.TenantManagementService.GetRegistryTokenPasswords.
func (c *tenantManagementServiceClient) GetRegistryTokenPasswords(ctx context.Context, req *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error) {
	return c.getRegistryTokenPasswords.CallUnary(ctx, req)
}

// CreateRegistryTokenPassword calls api.TenantManagementService.CreateRegistryTokenPassword.
func (c *tenantManagementServiceClient) CreateRegistryTokenPassword(ctx context.Context, req *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error) {
	return c.createRegistryTokenPassword.CallUnary(ctx, req)
}

// GetImages calls api.TenantManagementService.GetImages.
func (c *tenantManagementServiceClient) GetImages(ctx context.Context, req *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error) {
	return c.getImages.CallUnary(ctx, req)
}

// CreateInputSpecification calls api.TenantManagementService.CreateInputSpecification.
func (c *tenantManagementServiceClient) CreateInputSpecification(ctx context.Context, req *connect.Request[api.CreateInputSpecificationRequest]) (*connect.Response[api.CreateInputSpecificationResponse], error) {
	return c.createInputSpecification.CallUnary(ctx, req)
}

// CreateOutputSpecification calls api.TenantManagementService.CreateOutputSpecification.
func (c *tenantManagementServiceClient) CreateOutputSpecification(ctx context.Context, req *connect.Request[api.CreateOutputSpecificationRequest]) (*connect.Response[api.CreateOutputSpecificationResponse], error) {
	return c.createOutputSpecification.CallUnary(ctx, req)
}

// GetSpecifications calls api.TenantManagementService.GetSpecifications.
func (c *tenantManagementServiceClient) GetSpecifications(ctx context.Context, req *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error) {
	return c.getSpecifications.CallUnary(ctx, req)
}

// GetSpecification calls api.TenantManagementService.GetSpecification.
func (c *tenantManagementServiceClient) GetSpecification(ctx context.Context, req *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error) {
	return c.getSpecification.CallUnary(ctx, req)
}

// CreateLandingZoneSharedAccessSignature calls
// api.TenantManagementService.CreateLandingZoneSharedAccessSignature.
func (c *tenantManagementServiceClient) CreateLandingZoneSharedAccessSignature(ctx context.Context, req *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error) {
	return c.createLandingZoneSharedAccessSignature.CallUnary(ctx, req)
}

// TenantManagementServiceHandler is an implementation of the api.TenantManagementService service.
type TenantManagementServiceHandler interface {
	CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error)
	GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error)
	EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error)
	GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error)
	GetUserWorkspaceAssignment(context.Context, *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error)
	AssignUserToWorkspace(context.Context, *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error)
	GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error)
	CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error)
	GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error)
	CreateInputSpecification(context.Context, *connect.Request[api.CreateInputSpecificationRequest]) (*connect.Response[api.CreateInputSpecificationResponse], error)
	CreateOutputSpecification(context.Context, *connect.Request[api.CreateOutputSpecificationRequest]) (*connect.Response[api.CreateOutputSpecificationResponse], error)
	GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error)
	GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error)
	CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error)
}

// NewTenantManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantManagementServiceHandler(svc TenantManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantManagementServiceMethods := api.File_api_tenantManagement_proto.Services().ByName("TenantManagementService").Methods()
	tenantManagementServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetWorkspacesHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetWorkspacesProcedure,
		svc.GetWorkspaces,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetWorkspaces")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceEditWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceEditWorkspaceProcedure,
		svc.EditWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("EditWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetUsersHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetUserWorkspaceAssignmentHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetUserWorkspaceAssignmentProcedure,
		svc.GetUserWorkspaceAssignment,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetUserWorkspaceAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceAssignUserToWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceAssignUserToWorkspaceProcedure,
		svc.AssignUserToWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("AssignUserToWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetRegistryTokenPasswordsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetRegistryTokenPasswordsProcedure,
		svc.GetRegistryTokenPasswords,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetRegistryTokenPasswords")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateRegistryTokenPasswordHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateRegistryTokenPasswordProcedure,
		svc.CreateRegistryTokenPassword,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateRegistryTokenPassword")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetImagesHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetImagesProcedure,
		svc.GetImages,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetImages")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateInputSpecificationHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateInputSpecificationProcedure,
		svc.CreateInputSpecification,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateInputSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateOutputSpecificationHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateOutputSpecificationProcedure,
		svc.CreateOutputSpecification,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateOutputSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetSpecificationsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetSpecificationsProcedure,
		svc.GetSpecifications,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecifications")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetSpecificationHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetSpecificationProcedure,
		svc.GetSpecification,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateLandingZoneSharedAccessSignatureHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure,
		svc.CreateLandingZoneSharedAccessSignature,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateLandingZoneSharedAccessSignature")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.TenantManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantManagementServiceCreateWorkspaceProcedure:
			tenantManagementServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetWorkspacesProcedure:
			tenantManagementServiceGetWorkspacesHandler.ServeHTTP(w, r)
		case TenantManagementServiceEditWorkspaceProcedure:
			tenantManagementServiceEditWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetUsersProcedure:
			tenantManagementServiceGetUsersHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetUserWorkspaceAssignmentProcedure:
			tenantManagementServiceGetUserWorkspaceAssignmentHandler.ServeHTTP(w, r)
		case TenantManagementServiceAssignUserToWorkspaceProcedure:
			tenantManagementServiceAssignUserToWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetRegistryTokenPasswordsProcedure:
			tenantManagementServiceGetRegistryTokenPasswordsHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateRegistryTokenPasswordProcedure:
			tenantManagementServiceCreateRegistryTokenPasswordHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetImagesProcedure:
			tenantManagementServiceGetImagesHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateInputSpecificationProcedure:
			tenantManagementServiceCreateInputSpecificationHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateOutputSpecificationProcedure:
			tenantManagementServiceCreateOutputSpecificationHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetSpecificationsProcedure:
			tenantManagementServiceGetSpecificationsHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetSpecificationProcedure:
			tenantManagementServiceGetSpecificationHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure:
			tenantManagementServiceCreateLandingZoneSharedAccessSignatureHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantManagementServiceHandler struct{}

func (UnimplementedTenantManagementServiceHandler) CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetWorkspaces is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.EditWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetUsers is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetUserWorkspaceAssignment(context.Context, *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetUserWorkspaceAssignment is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) AssignUserToWorkspace(context.Context, *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.AssignUserToWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetRegistryTokenPasswords is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateRegistryTokenPassword is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetImages is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateInputSpecification(context.Context, *connect.Request[api.CreateInputSpecificationRequest]) (*connect.Response[api.CreateInputSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateInputSpecification is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateOutputSpecification(context.Context, *connect.Request[api.CreateOutputSpecificationRequest]) (*connect.Response[api.CreateOutputSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateOutputSpecification is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetSpecifications is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetSpecification is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateLandingZoneSharedAccessSignature is not implemented"))
}
