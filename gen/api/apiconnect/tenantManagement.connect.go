// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/tenantManagement.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/MorhafAlshibly/iunvi/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantManagementServiceName is the fully-qualified name of the TenantManagementService service.
	TenantManagementServiceName = "api.TenantManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantManagementServiceCreateWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's CreateWorkspace RPC.
	TenantManagementServiceCreateWorkspaceProcedure = "/api.TenantManagementService/CreateWorkspace"
	// TenantManagementServiceGetWorkspacesProcedure is the fully-qualified name of the
	// TenantManagementService's GetWorkspaces RPC.
	TenantManagementServiceGetWorkspacesProcedure = "/api.TenantManagementService/GetWorkspaces"
	// TenantManagementServiceEditWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's EditWorkspace RPC.
	TenantManagementServiceEditWorkspaceProcedure = "/api.TenantManagementService/EditWorkspace"
	// TenantManagementServiceGetUsersProcedure is the fully-qualified name of the
	// TenantManagementService's GetUsers RPC.
	TenantManagementServiceGetUsersProcedure = "/api.TenantManagementService/GetUsers"
	// TenantManagementServiceGetUserWorkspaceAssignmentProcedure is the fully-qualified name of the
	// TenantManagementService's GetUserWorkspaceAssignment RPC.
	TenantManagementServiceGetUserWorkspaceAssignmentProcedure = "/api.TenantManagementService/GetUserWorkspaceAssignment"
	// TenantManagementServiceAssignUserToWorkspaceProcedure is the fully-qualified name of the
	// TenantManagementService's AssignUserToWorkspace RPC.
	TenantManagementServiceAssignUserToWorkspaceProcedure = "/api.TenantManagementService/AssignUserToWorkspace"
	// TenantManagementServiceGetRegistryTokenPasswordsProcedure is the fully-qualified name of the
	// TenantManagementService's GetRegistryTokenPasswords RPC.
	TenantManagementServiceGetRegistryTokenPasswordsProcedure = "/api.TenantManagementService/GetRegistryTokenPasswords"
	// TenantManagementServiceCreateRegistryTokenPasswordProcedure is the fully-qualified name of the
	// TenantManagementService's CreateRegistryTokenPassword RPC.
	TenantManagementServiceCreateRegistryTokenPasswordProcedure = "/api.TenantManagementService/CreateRegistryTokenPassword"
	// TenantManagementServiceGetImagesProcedure is the fully-qualified name of the
	// TenantManagementService's GetImages RPC.
	TenantManagementServiceGetImagesProcedure = "/api.TenantManagementService/GetImages"
	// TenantManagementServiceCreateSpecificationProcedure is the fully-qualified name of the
	// TenantManagementService's CreateSpecification RPC.
	TenantManagementServiceCreateSpecificationProcedure = "/api.TenantManagementService/CreateSpecification"
	// TenantManagementServiceGetSpecificationsProcedure is the fully-qualified name of the
	// TenantManagementService's GetSpecifications RPC.
	TenantManagementServiceGetSpecificationsProcedure = "/api.TenantManagementService/GetSpecifications"
	// TenantManagementServiceGetSpecificationProcedure is the fully-qualified name of the
	// TenantManagementService's GetSpecification RPC.
	TenantManagementServiceGetSpecificationProcedure = "/api.TenantManagementService/GetSpecification"
	// TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure is the fully-qualified
	// name of the TenantManagementService's CreateLandingZoneSharedAccessSignature RPC.
	TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure = "/api.TenantManagementService/CreateLandingZoneSharedAccessSignature"
	// TenantManagementServiceGetLandingZoneFilesProcedure is the fully-qualified name of the
	// TenantManagementService's GetLandingZoneFiles RPC.
	TenantManagementServiceGetLandingZoneFilesProcedure = "/api.TenantManagementService/GetLandingZoneFiles"
	// TenantManagementServiceCreateFileGroupProcedure is the fully-qualified name of the
	// TenantManagementService's CreateFileGroup RPC.
	TenantManagementServiceCreateFileGroupProcedure = "/api.TenantManagementService/CreateFileGroup"
	// TenantManagementServiceGetFileGroupsProcedure is the fully-qualified name of the
	// TenantManagementService's GetFileGroups RPC.
	TenantManagementServiceGetFileGroupsProcedure = "/api.TenantManagementService/GetFileGroups"
	// TenantManagementServiceCreateModelProcedure is the fully-qualified name of the
	// TenantManagementService's CreateModel RPC.
	TenantManagementServiceCreateModelProcedure = "/api.TenantManagementService/CreateModel"
	// TenantManagementServiceGetModelsProcedure is the fully-qualified name of the
	// TenantManagementService's GetModels RPC.
	TenantManagementServiceGetModelsProcedure = "/api.TenantManagementService/GetModels"
	// TenantManagementServiceGetModelProcedure is the fully-qualified name of the
	// TenantManagementService's GetModel RPC.
	TenantManagementServiceGetModelProcedure = "/api.TenantManagementService/GetModel"
	// TenantManagementServiceCreateModelRunProcedure is the fully-qualified name of the
	// TenantManagementService's CreateModelRun RPC.
	TenantManagementServiceCreateModelRunProcedure = "/api.TenantManagementService/CreateModelRun"
	// TenantManagementServiceGetModelRunsProcedure is the fully-qualified name of the
	// TenantManagementService's GetModelRuns RPC.
	TenantManagementServiceGetModelRunsProcedure = "/api.TenantManagementService/GetModelRuns"
	// TenantManagementServiceCreateDashboardProcedure is the fully-qualified name of the
	// TenantManagementService's CreateDashboard RPC.
	TenantManagementServiceCreateDashboardProcedure = "/api.TenantManagementService/CreateDashboard"
	// TenantManagementServiceGetDashboardsProcedure is the fully-qualified name of the
	// TenantManagementService's GetDashboards RPC.
	TenantManagementServiceGetDashboardsProcedure = "/api.TenantManagementService/GetDashboards"
	// TenantManagementServiceGetDashboardProcedure is the fully-qualified name of the
	// TenantManagementService's GetDashboard RPC.
	TenantManagementServiceGetDashboardProcedure = "/api.TenantManagementService/GetDashboard"
	// TenantManagementServiceGetModelRunDashboardProcedure is the fully-qualified name of the
	// TenantManagementService's GetModelRunDashboard RPC.
	TenantManagementServiceGetModelRunDashboardProcedure = "/api.TenantManagementService/GetModelRunDashboard"
)

// TenantManagementServiceClient is a client for the api.TenantManagementService service.
type TenantManagementServiceClient interface {
	CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error)
	GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error)
	EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error)
	GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error)
	GetUserWorkspaceAssignment(context.Context, *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error)
	AssignUserToWorkspace(context.Context, *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error)
	GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error)
	CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error)
	GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error)
	CreateSpecification(context.Context, *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error)
	GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error)
	GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error)
	CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error)
	GetLandingZoneFiles(context.Context, *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error)
	CreateFileGroup(context.Context, *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error)
	GetFileGroups(context.Context, *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error)
	CreateModel(context.Context, *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error)
	GetModels(context.Context, *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error)
	GetModel(context.Context, *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error)
	CreateModelRun(context.Context, *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error)
	GetModelRuns(context.Context, *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error)
	CreateDashboard(context.Context, *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error)
	GetDashboards(context.Context, *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error)
	GetDashboard(context.Context, *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error)
	GetModelRunDashboard(context.Context, *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error)
}

// NewTenantManagementServiceClient constructs a client for the api.TenantManagementService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantManagementServiceMethods := api.File_api_tenantManagement_proto.Services().ByName("TenantManagementService").Methods()
	return &tenantManagementServiceClient{
		createWorkspace: connect.NewClient[api.CreateWorkspaceRequest, api.CreateWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getWorkspaces: connect.NewClient[api.GetWorkspacesRequest, api.GetWorkspacesResponse](
			httpClient,
			baseURL+TenantManagementServiceGetWorkspacesProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetWorkspaces")),
			connect.WithClientOptions(opts...),
		),
		editWorkspace: connect.NewClient[api.EditWorkspaceRequest, api.EditWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceEditWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("EditWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getUsers: connect.NewClient[api.GetUsersRequest, api.GetUsersResponse](
			httpClient,
			baseURL+TenantManagementServiceGetUsersProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		getUserWorkspaceAssignment: connect.NewClient[api.GetUserWorkspaceAssignmentRequest, api.GetUserWorkspaceAssignmentResponse](
			httpClient,
			baseURL+TenantManagementServiceGetUserWorkspaceAssignmentProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetUserWorkspaceAssignment")),
			connect.WithClientOptions(opts...),
		),
		assignUserToWorkspace: connect.NewClient[api.AssignUserToWorkspaceRequest, api.AssignUserToWorkspaceResponse](
			httpClient,
			baseURL+TenantManagementServiceAssignUserToWorkspaceProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("AssignUserToWorkspace")),
			connect.WithClientOptions(opts...),
		),
		getRegistryTokenPasswords: connect.NewClient[api.GetRegistryTokenPasswordsRequest, api.GetRegistryTokenPasswordsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetRegistryTokenPasswordsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetRegistryTokenPasswords")),
			connect.WithClientOptions(opts...),
		),
		createRegistryTokenPassword: connect.NewClient[api.CreateRegistryTokenPasswordRequest, api.CreateRegistryTokenPasswordResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateRegistryTokenPasswordProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateRegistryTokenPassword")),
			connect.WithClientOptions(opts...),
		),
		getImages: connect.NewClient[api.GetImagesRequest, api.GetImagesResponse](
			httpClient,
			baseURL+TenantManagementServiceGetImagesProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetImages")),
			connect.WithClientOptions(opts...),
		),
		createSpecification: connect.NewClient[api.CreateSpecificationRequest, api.CreateSpecificationResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateSpecificationProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateSpecification")),
			connect.WithClientOptions(opts...),
		),
		getSpecifications: connect.NewClient[api.GetSpecificationsRequest, api.GetSpecificationsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetSpecificationsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecifications")),
			connect.WithClientOptions(opts...),
		),
		getSpecification: connect.NewClient[api.GetSpecificationRequest, api.GetSpecificationResponse](
			httpClient,
			baseURL+TenantManagementServiceGetSpecificationProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecification")),
			connect.WithClientOptions(opts...),
		),
		createLandingZoneSharedAccessSignature: connect.NewClient[api.CreateLandingZoneSharedAccessSignatureRequest, api.CreateLandingZoneSharedAccessSignatureResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateLandingZoneSharedAccessSignature")),
			connect.WithClientOptions(opts...),
		),
		getLandingZoneFiles: connect.NewClient[api.GetLandingZoneFilesRequest, api.GetLandingZoneFilesResponse](
			httpClient,
			baseURL+TenantManagementServiceGetLandingZoneFilesProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetLandingZoneFiles")),
			connect.WithClientOptions(opts...),
		),
		createFileGroup: connect.NewClient[api.CreateFileGroupRequest, api.CreateFileGroupResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateFileGroupProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateFileGroup")),
			connect.WithClientOptions(opts...),
		),
		getFileGroups: connect.NewClient[api.GetFileGroupsRequest, api.GetFileGroupsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetFileGroupsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetFileGroups")),
			connect.WithClientOptions(opts...),
		),
		createModel: connect.NewClient[api.CreateModelRequest, api.CreateModelResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateModelProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateModel")),
			connect.WithClientOptions(opts...),
		),
		getModels: connect.NewClient[api.GetModelsRequest, api.GetModelsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetModelsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetModels")),
			connect.WithClientOptions(opts...),
		),
		getModel: connect.NewClient[api.GetModelRequest, api.GetModelResponse](
			httpClient,
			baseURL+TenantManagementServiceGetModelProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetModel")),
			connect.WithClientOptions(opts...),
		),
		createModelRun: connect.NewClient[api.CreateModelRunRequest, api.CreateModelRunResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateModelRunProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateModelRun")),
			connect.WithClientOptions(opts...),
		),
		getModelRuns: connect.NewClient[api.GetModelRunsRequest, api.GetModelRunsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetModelRunsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetModelRuns")),
			connect.WithClientOptions(opts...),
		),
		createDashboard: connect.NewClient[api.CreateDashboardRequest, api.CreateDashboardResponse](
			httpClient,
			baseURL+TenantManagementServiceCreateDashboardProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("CreateDashboard")),
			connect.WithClientOptions(opts...),
		),
		getDashboards: connect.NewClient[api.GetDashboardsRequest, api.GetDashboardsResponse](
			httpClient,
			baseURL+TenantManagementServiceGetDashboardsProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetDashboards")),
			connect.WithClientOptions(opts...),
		),
		getDashboard: connect.NewClient[api.GetDashboardRequest, api.GetDashboardResponse](
			httpClient,
			baseURL+TenantManagementServiceGetDashboardProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetDashboard")),
			connect.WithClientOptions(opts...),
		),
		getModelRunDashboard: connect.NewClient[api.GetModelRunDashboardRequest, api.GetModelRunDashboardResponse](
			httpClient,
			baseURL+TenantManagementServiceGetModelRunDashboardProcedure,
			connect.WithSchema(tenantManagementServiceMethods.ByName("GetModelRunDashboard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantManagementServiceClient implements TenantManagementServiceClient.
type tenantManagementServiceClient struct {
	createWorkspace                        *connect.Client[api.CreateWorkspaceRequest, api.CreateWorkspaceResponse]
	getWorkspaces                          *connect.Client[api.GetWorkspacesRequest, api.GetWorkspacesResponse]
	editWorkspace                          *connect.Client[api.EditWorkspaceRequest, api.EditWorkspaceResponse]
	getUsers                               *connect.Client[api.GetUsersRequest, api.GetUsersResponse]
	getUserWorkspaceAssignment             *connect.Client[api.GetUserWorkspaceAssignmentRequest, api.GetUserWorkspaceAssignmentResponse]
	assignUserToWorkspace                  *connect.Client[api.AssignUserToWorkspaceRequest, api.AssignUserToWorkspaceResponse]
	getRegistryTokenPasswords              *connect.Client[api.GetRegistryTokenPasswordsRequest, api.GetRegistryTokenPasswordsResponse]
	createRegistryTokenPassword            *connect.Client[api.CreateRegistryTokenPasswordRequest, api.CreateRegistryTokenPasswordResponse]
	getImages                              *connect.Client[api.GetImagesRequest, api.GetImagesResponse]
	createSpecification                    *connect.Client[api.CreateSpecificationRequest, api.CreateSpecificationResponse]
	getSpecifications                      *connect.Client[api.GetSpecificationsRequest, api.GetSpecificationsResponse]
	getSpecification                       *connect.Client[api.GetSpecificationRequest, api.GetSpecificationResponse]
	createLandingZoneSharedAccessSignature *connect.Client[api.CreateLandingZoneSharedAccessSignatureRequest, api.CreateLandingZoneSharedAccessSignatureResponse]
	getLandingZoneFiles                    *connect.Client[api.GetLandingZoneFilesRequest, api.GetLandingZoneFilesResponse]
	createFileGroup                        *connect.Client[api.CreateFileGroupRequest, api.CreateFileGroupResponse]
	getFileGroups                          *connect.Client[api.GetFileGroupsRequest, api.GetFileGroupsResponse]
	createModel                            *connect.Client[api.CreateModelRequest, api.CreateModelResponse]
	getModels                              *connect.Client[api.GetModelsRequest, api.GetModelsResponse]
	getModel                               *connect.Client[api.GetModelRequest, api.GetModelResponse]
	createModelRun                         *connect.Client[api.CreateModelRunRequest, api.CreateModelRunResponse]
	getModelRuns                           *connect.Client[api.GetModelRunsRequest, api.GetModelRunsResponse]
	createDashboard                        *connect.Client[api.CreateDashboardRequest, api.CreateDashboardResponse]
	getDashboards                          *connect.Client[api.GetDashboardsRequest, api.GetDashboardsResponse]
	getDashboard                           *connect.Client[api.GetDashboardRequest, api.GetDashboardResponse]
	getModelRunDashboard                   *connect.Client[api.GetModelRunDashboardRequest, api.GetModelRunDashboardResponse]
}

// CreateWorkspace calls api.TenantManagementService.CreateWorkspace.
func (c *tenantManagementServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// GetWorkspaces calls api.TenantManagementService.GetWorkspaces.
func (c *tenantManagementServiceClient) GetWorkspaces(ctx context.Context, req *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error) {
	return c.getWorkspaces.CallUnary(ctx, req)
}

// EditWorkspace calls api.TenantManagementService.EditWorkspace.
func (c *tenantManagementServiceClient) EditWorkspace(ctx context.Context, req *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error) {
	return c.editWorkspace.CallUnary(ctx, req)
}

// GetUsers calls api.TenantManagementService.GetUsers.
func (c *tenantManagementServiceClient) GetUsers(ctx context.Context, req *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// GetUserWorkspaceAssignment calls api.TenantManagementService.GetUserWorkspaceAssignment.
func (c *tenantManagementServiceClient) GetUserWorkspaceAssignment(ctx context.Context, req *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error) {
	return c.getUserWorkspaceAssignment.CallUnary(ctx, req)
}

// AssignUserToWorkspace calls api.TenantManagementService.AssignUserToWorkspace.
func (c *tenantManagementServiceClient) AssignUserToWorkspace(ctx context.Context, req *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error) {
	return c.assignUserToWorkspace.CallUnary(ctx, req)
}

// GetRegistryTokenPasswords calls api.TenantManagementService.GetRegistryTokenPasswords.
func (c *tenantManagementServiceClient) GetRegistryTokenPasswords(ctx context.Context, req *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error) {
	return c.getRegistryTokenPasswords.CallUnary(ctx, req)
}

// CreateRegistryTokenPassword calls api.TenantManagementService.CreateRegistryTokenPassword.
func (c *tenantManagementServiceClient) CreateRegistryTokenPassword(ctx context.Context, req *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error) {
	return c.createRegistryTokenPassword.CallUnary(ctx, req)
}

// GetImages calls api.TenantManagementService.GetImages.
func (c *tenantManagementServiceClient) GetImages(ctx context.Context, req *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error) {
	return c.getImages.CallUnary(ctx, req)
}

// CreateSpecification calls api.TenantManagementService.CreateSpecification.
func (c *tenantManagementServiceClient) CreateSpecification(ctx context.Context, req *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error) {
	return c.createSpecification.CallUnary(ctx, req)
}

// GetSpecifications calls api.TenantManagementService.GetSpecifications.
func (c *tenantManagementServiceClient) GetSpecifications(ctx context.Context, req *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error) {
	return c.getSpecifications.CallUnary(ctx, req)
}

// GetSpecification calls api.TenantManagementService.GetSpecification.
func (c *tenantManagementServiceClient) GetSpecification(ctx context.Context, req *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error) {
	return c.getSpecification.CallUnary(ctx, req)
}

// CreateLandingZoneSharedAccessSignature calls
// api.TenantManagementService.CreateLandingZoneSharedAccessSignature.
func (c *tenantManagementServiceClient) CreateLandingZoneSharedAccessSignature(ctx context.Context, req *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error) {
	return c.createLandingZoneSharedAccessSignature.CallUnary(ctx, req)
}

// GetLandingZoneFiles calls api.TenantManagementService.GetLandingZoneFiles.
func (c *tenantManagementServiceClient) GetLandingZoneFiles(ctx context.Context, req *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error) {
	return c.getLandingZoneFiles.CallUnary(ctx, req)
}

// CreateFileGroup calls api.TenantManagementService.CreateFileGroup.
func (c *tenantManagementServiceClient) CreateFileGroup(ctx context.Context, req *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error) {
	return c.createFileGroup.CallUnary(ctx, req)
}

// GetFileGroups calls api.TenantManagementService.GetFileGroups.
func (c *tenantManagementServiceClient) GetFileGroups(ctx context.Context, req *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error) {
	return c.getFileGroups.CallUnary(ctx, req)
}

// CreateModel calls api.TenantManagementService.CreateModel.
func (c *tenantManagementServiceClient) CreateModel(ctx context.Context, req *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error) {
	return c.createModel.CallUnary(ctx, req)
}

// GetModels calls api.TenantManagementService.GetModels.
func (c *tenantManagementServiceClient) GetModels(ctx context.Context, req *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error) {
	return c.getModels.CallUnary(ctx, req)
}

// GetModel calls api.TenantManagementService.GetModel.
func (c *tenantManagementServiceClient) GetModel(ctx context.Context, req *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error) {
	return c.getModel.CallUnary(ctx, req)
}

// CreateModelRun calls api.TenantManagementService.CreateModelRun.
func (c *tenantManagementServiceClient) CreateModelRun(ctx context.Context, req *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error) {
	return c.createModelRun.CallUnary(ctx, req)
}

// GetModelRuns calls api.TenantManagementService.GetModelRuns.
func (c *tenantManagementServiceClient) GetModelRuns(ctx context.Context, req *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error) {
	return c.getModelRuns.CallUnary(ctx, req)
}

// CreateDashboard calls api.TenantManagementService.CreateDashboard.
func (c *tenantManagementServiceClient) CreateDashboard(ctx context.Context, req *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error) {
	return c.createDashboard.CallUnary(ctx, req)
}

// GetDashboards calls api.TenantManagementService.GetDashboards.
func (c *tenantManagementServiceClient) GetDashboards(ctx context.Context, req *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error) {
	return c.getDashboards.CallUnary(ctx, req)
}

// GetDashboard calls api.TenantManagementService.GetDashboard.
func (c *tenantManagementServiceClient) GetDashboard(ctx context.Context, req *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error) {
	return c.getDashboard.CallUnary(ctx, req)
}

// GetModelRunDashboard calls api.TenantManagementService.GetModelRunDashboard.
func (c *tenantManagementServiceClient) GetModelRunDashboard(ctx context.Context, req *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error) {
	return c.getModelRunDashboard.CallUnary(ctx, req)
}

// TenantManagementServiceHandler is an implementation of the api.TenantManagementService service.
type TenantManagementServiceHandler interface {
	CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error)
	GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error)
	EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error)
	GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error)
	GetUserWorkspaceAssignment(context.Context, *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error)
	AssignUserToWorkspace(context.Context, *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error)
	GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error)
	CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error)
	GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error)
	CreateSpecification(context.Context, *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error)
	GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error)
	GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error)
	CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error)
	GetLandingZoneFiles(context.Context, *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error)
	CreateFileGroup(context.Context, *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error)
	GetFileGroups(context.Context, *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error)
	CreateModel(context.Context, *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error)
	GetModels(context.Context, *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error)
	GetModel(context.Context, *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error)
	CreateModelRun(context.Context, *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error)
	GetModelRuns(context.Context, *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error)
	CreateDashboard(context.Context, *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error)
	GetDashboards(context.Context, *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error)
	GetDashboard(context.Context, *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error)
	GetModelRunDashboard(context.Context, *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error)
}

// NewTenantManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantManagementServiceHandler(svc TenantManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantManagementServiceMethods := api.File_api_tenantManagement_proto.Services().ByName("TenantManagementService").Methods()
	tenantManagementServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetWorkspacesHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetWorkspacesProcedure,
		svc.GetWorkspaces,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetWorkspaces")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceEditWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceEditWorkspaceProcedure,
		svc.EditWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("EditWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetUsersHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetUserWorkspaceAssignmentHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetUserWorkspaceAssignmentProcedure,
		svc.GetUserWorkspaceAssignment,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetUserWorkspaceAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceAssignUserToWorkspaceHandler := connect.NewUnaryHandler(
		TenantManagementServiceAssignUserToWorkspaceProcedure,
		svc.AssignUserToWorkspace,
		connect.WithSchema(tenantManagementServiceMethods.ByName("AssignUserToWorkspace")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetRegistryTokenPasswordsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetRegistryTokenPasswordsProcedure,
		svc.GetRegistryTokenPasswords,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetRegistryTokenPasswords")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateRegistryTokenPasswordHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateRegistryTokenPasswordProcedure,
		svc.CreateRegistryTokenPassword,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateRegistryTokenPassword")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetImagesHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetImagesProcedure,
		svc.GetImages,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetImages")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateSpecificationHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateSpecificationProcedure,
		svc.CreateSpecification,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetSpecificationsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetSpecificationsProcedure,
		svc.GetSpecifications,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecifications")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetSpecificationHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetSpecificationProcedure,
		svc.GetSpecification,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateLandingZoneSharedAccessSignatureHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure,
		svc.CreateLandingZoneSharedAccessSignature,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateLandingZoneSharedAccessSignature")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetLandingZoneFilesHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetLandingZoneFilesProcedure,
		svc.GetLandingZoneFiles,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetLandingZoneFiles")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateFileGroupHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateFileGroupProcedure,
		svc.CreateFileGroup,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateFileGroup")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetFileGroupsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetFileGroupsProcedure,
		svc.GetFileGroups,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetFileGroups")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateModelHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateModelProcedure,
		svc.CreateModel,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateModel")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetModelsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetModelsProcedure,
		svc.GetModels,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetModels")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetModelHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetModelProcedure,
		svc.GetModel,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetModel")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateModelRunHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateModelRunProcedure,
		svc.CreateModelRun,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateModelRun")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetModelRunsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetModelRunsProcedure,
		svc.GetModelRuns,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetModelRuns")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceCreateDashboardHandler := connect.NewUnaryHandler(
		TenantManagementServiceCreateDashboardProcedure,
		svc.CreateDashboard,
		connect.WithSchema(tenantManagementServiceMethods.ByName("CreateDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetDashboardsHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetDashboardsProcedure,
		svc.GetDashboards,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetDashboards")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetDashboardHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetDashboardProcedure,
		svc.GetDashboard,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	tenantManagementServiceGetModelRunDashboardHandler := connect.NewUnaryHandler(
		TenantManagementServiceGetModelRunDashboardProcedure,
		svc.GetModelRunDashboard,
		connect.WithSchema(tenantManagementServiceMethods.ByName("GetModelRunDashboard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.TenantManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantManagementServiceCreateWorkspaceProcedure:
			tenantManagementServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetWorkspacesProcedure:
			tenantManagementServiceGetWorkspacesHandler.ServeHTTP(w, r)
		case TenantManagementServiceEditWorkspaceProcedure:
			tenantManagementServiceEditWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetUsersProcedure:
			tenantManagementServiceGetUsersHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetUserWorkspaceAssignmentProcedure:
			tenantManagementServiceGetUserWorkspaceAssignmentHandler.ServeHTTP(w, r)
		case TenantManagementServiceAssignUserToWorkspaceProcedure:
			tenantManagementServiceAssignUserToWorkspaceHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetRegistryTokenPasswordsProcedure:
			tenantManagementServiceGetRegistryTokenPasswordsHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateRegistryTokenPasswordProcedure:
			tenantManagementServiceCreateRegistryTokenPasswordHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetImagesProcedure:
			tenantManagementServiceGetImagesHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateSpecificationProcedure:
			tenantManagementServiceCreateSpecificationHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetSpecificationsProcedure:
			tenantManagementServiceGetSpecificationsHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetSpecificationProcedure:
			tenantManagementServiceGetSpecificationHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateLandingZoneSharedAccessSignatureProcedure:
			tenantManagementServiceCreateLandingZoneSharedAccessSignatureHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetLandingZoneFilesProcedure:
			tenantManagementServiceGetLandingZoneFilesHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateFileGroupProcedure:
			tenantManagementServiceCreateFileGroupHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetFileGroupsProcedure:
			tenantManagementServiceGetFileGroupsHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateModelProcedure:
			tenantManagementServiceCreateModelHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetModelsProcedure:
			tenantManagementServiceGetModelsHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetModelProcedure:
			tenantManagementServiceGetModelHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateModelRunProcedure:
			tenantManagementServiceCreateModelRunHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetModelRunsProcedure:
			tenantManagementServiceGetModelRunsHandler.ServeHTTP(w, r)
		case TenantManagementServiceCreateDashboardProcedure:
			tenantManagementServiceCreateDashboardHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetDashboardsProcedure:
			tenantManagementServiceGetDashboardsHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetDashboardProcedure:
			tenantManagementServiceGetDashboardHandler.ServeHTTP(w, r)
		case TenantManagementServiceGetModelRunDashboardProcedure:
			tenantManagementServiceGetModelRunDashboardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantManagementServiceHandler struct{}

func (UnimplementedTenantManagementServiceHandler) CreateWorkspace(context.Context, *connect.Request[api.CreateWorkspaceRequest]) (*connect.Response[api.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetWorkspaces(context.Context, *connect.Request[api.GetWorkspacesRequest]) (*connect.Response[api.GetWorkspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetWorkspaces is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) EditWorkspace(context.Context, *connect.Request[api.EditWorkspaceRequest]) (*connect.Response[api.EditWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.EditWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetUsers is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetUserWorkspaceAssignment(context.Context, *connect.Request[api.GetUserWorkspaceAssignmentRequest]) (*connect.Response[api.GetUserWorkspaceAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetUserWorkspaceAssignment is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) AssignUserToWorkspace(context.Context, *connect.Request[api.AssignUserToWorkspaceRequest]) (*connect.Response[api.AssignUserToWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.AssignUserToWorkspace is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetRegistryTokenPasswords is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateRegistryTokenPassword is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetImages is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateSpecification(context.Context, *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateSpecification is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetSpecifications is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetSpecification is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateLandingZoneSharedAccessSignature is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetLandingZoneFiles(context.Context, *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetLandingZoneFiles is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateFileGroup(context.Context, *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateFileGroup is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetFileGroups(context.Context, *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetFileGroups is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateModel(context.Context, *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateModel is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetModels(context.Context, *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetModels is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetModel(context.Context, *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetModel is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateModelRun(context.Context, *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateModelRun is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetModelRuns(context.Context, *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetModelRuns is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) CreateDashboard(context.Context, *connect.Request[api.CreateDashboardRequest]) (*connect.Response[api.CreateDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.CreateDashboard is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetDashboards(context.Context, *connect.Request[api.GetDashboardsRequest]) (*connect.Response[api.GetDashboardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetDashboards is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetDashboard(context.Context, *connect.Request[api.GetDashboardRequest]) (*connect.Response[api.GetDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetDashboard is not implemented"))
}

func (UnimplementedTenantManagementServiceHandler) GetModelRunDashboard(context.Context, *connect.Request[api.GetModelRunDashboardRequest]) (*connect.Response[api.GetModelRunDashboardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.TenantManagementService.GetModelRunDashboard is not implemented"))
}
