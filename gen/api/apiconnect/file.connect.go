// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/file.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/MorhafAlshibly/iunvi/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "api.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceCreateSpecificationProcedure is the fully-qualified name of the FileService's
	// CreateSpecification RPC.
	FileServiceCreateSpecificationProcedure = "/api.FileService/CreateSpecification"
	// FileServiceGetSpecificationsProcedure is the fully-qualified name of the FileService's
	// GetSpecifications RPC.
	FileServiceGetSpecificationsProcedure = "/api.FileService/GetSpecifications"
	// FileServiceGetSpecificationProcedure is the fully-qualified name of the FileService's
	// GetSpecification RPC.
	FileServiceGetSpecificationProcedure = "/api.FileService/GetSpecification"
	// FileServiceCreateLandingZoneSharedAccessSignatureProcedure is the fully-qualified name of the
	// FileService's CreateLandingZoneSharedAccessSignature RPC.
	FileServiceCreateLandingZoneSharedAccessSignatureProcedure = "/api.FileService/CreateLandingZoneSharedAccessSignature"
	// FileServiceGetLandingZoneFilesProcedure is the fully-qualified name of the FileService's
	// GetLandingZoneFiles RPC.
	FileServiceGetLandingZoneFilesProcedure = "/api.FileService/GetLandingZoneFiles"
	// FileServiceCreateFileGroupProcedure is the fully-qualified name of the FileService's
	// CreateFileGroup RPC.
	FileServiceCreateFileGroupProcedure = "/api.FileService/CreateFileGroup"
	// FileServiceGetFileGroupsProcedure is the fully-qualified name of the FileService's GetFileGroups
	// RPC.
	FileServiceGetFileGroupsProcedure = "/api.FileService/GetFileGroups"
)

// FileServiceClient is a client for the api.FileService service.
type FileServiceClient interface {
	CreateSpecification(context.Context, *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error)
	GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error)
	GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error)
	CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error)
	GetLandingZoneFiles(context.Context, *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error)
	CreateFileGroup(context.Context, *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error)
	GetFileGroups(context.Context, *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error)
}

// NewFileServiceClient constructs a client for the api.FileService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := api.File_api_file_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		createSpecification: connect.NewClient[api.CreateSpecificationRequest, api.CreateSpecificationResponse](
			httpClient,
			baseURL+FileServiceCreateSpecificationProcedure,
			connect.WithSchema(fileServiceMethods.ByName("CreateSpecification")),
			connect.WithClientOptions(opts...),
		),
		getSpecifications: connect.NewClient[api.GetSpecificationsRequest, api.GetSpecificationsResponse](
			httpClient,
			baseURL+FileServiceGetSpecificationsProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetSpecifications")),
			connect.WithClientOptions(opts...),
		),
		getSpecification: connect.NewClient[api.GetSpecificationRequest, api.GetSpecificationResponse](
			httpClient,
			baseURL+FileServiceGetSpecificationProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetSpecification")),
			connect.WithClientOptions(opts...),
		),
		createLandingZoneSharedAccessSignature: connect.NewClient[api.CreateLandingZoneSharedAccessSignatureRequest, api.CreateLandingZoneSharedAccessSignatureResponse](
			httpClient,
			baseURL+FileServiceCreateLandingZoneSharedAccessSignatureProcedure,
			connect.WithSchema(fileServiceMethods.ByName("CreateLandingZoneSharedAccessSignature")),
			connect.WithClientOptions(opts...),
		),
		getLandingZoneFiles: connect.NewClient[api.GetLandingZoneFilesRequest, api.GetLandingZoneFilesResponse](
			httpClient,
			baseURL+FileServiceGetLandingZoneFilesProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetLandingZoneFiles")),
			connect.WithClientOptions(opts...),
		),
		createFileGroup: connect.NewClient[api.CreateFileGroupRequest, api.CreateFileGroupResponse](
			httpClient,
			baseURL+FileServiceCreateFileGroupProcedure,
			connect.WithSchema(fileServiceMethods.ByName("CreateFileGroup")),
			connect.WithClientOptions(opts...),
		),
		getFileGroups: connect.NewClient[api.GetFileGroupsRequest, api.GetFileGroupsResponse](
			httpClient,
			baseURL+FileServiceGetFileGroupsProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetFileGroups")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	createSpecification                    *connect.Client[api.CreateSpecificationRequest, api.CreateSpecificationResponse]
	getSpecifications                      *connect.Client[api.GetSpecificationsRequest, api.GetSpecificationsResponse]
	getSpecification                       *connect.Client[api.GetSpecificationRequest, api.GetSpecificationResponse]
	createLandingZoneSharedAccessSignature *connect.Client[api.CreateLandingZoneSharedAccessSignatureRequest, api.CreateLandingZoneSharedAccessSignatureResponse]
	getLandingZoneFiles                    *connect.Client[api.GetLandingZoneFilesRequest, api.GetLandingZoneFilesResponse]
	createFileGroup                        *connect.Client[api.CreateFileGroupRequest, api.CreateFileGroupResponse]
	getFileGroups                          *connect.Client[api.GetFileGroupsRequest, api.GetFileGroupsResponse]
}

// CreateSpecification calls api.FileService.CreateSpecification.
func (c *fileServiceClient) CreateSpecification(ctx context.Context, req *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error) {
	return c.createSpecification.CallUnary(ctx, req)
}

// GetSpecifications calls api.FileService.GetSpecifications.
func (c *fileServiceClient) GetSpecifications(ctx context.Context, req *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error) {
	return c.getSpecifications.CallUnary(ctx, req)
}

// GetSpecification calls api.FileService.GetSpecification.
func (c *fileServiceClient) GetSpecification(ctx context.Context, req *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error) {
	return c.getSpecification.CallUnary(ctx, req)
}

// CreateLandingZoneSharedAccessSignature calls
// api.FileService.CreateLandingZoneSharedAccessSignature.
func (c *fileServiceClient) CreateLandingZoneSharedAccessSignature(ctx context.Context, req *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error) {
	return c.createLandingZoneSharedAccessSignature.CallUnary(ctx, req)
}

// GetLandingZoneFiles calls api.FileService.GetLandingZoneFiles.
func (c *fileServiceClient) GetLandingZoneFiles(ctx context.Context, req *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error) {
	return c.getLandingZoneFiles.CallUnary(ctx, req)
}

// CreateFileGroup calls api.FileService.CreateFileGroup.
func (c *fileServiceClient) CreateFileGroup(ctx context.Context, req *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error) {
	return c.createFileGroup.CallUnary(ctx, req)
}

// GetFileGroups calls api.FileService.GetFileGroups.
func (c *fileServiceClient) GetFileGroups(ctx context.Context, req *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error) {
	return c.getFileGroups.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the api.FileService service.
type FileServiceHandler interface {
	CreateSpecification(context.Context, *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error)
	GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error)
	GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error)
	CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error)
	GetLandingZoneFiles(context.Context, *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error)
	CreateFileGroup(context.Context, *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error)
	GetFileGroups(context.Context, *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := api.File_api_file_proto.Services().ByName("FileService").Methods()
	fileServiceCreateSpecificationHandler := connect.NewUnaryHandler(
		FileServiceCreateSpecificationProcedure,
		svc.CreateSpecification,
		connect.WithSchema(fileServiceMethods.ByName("CreateSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetSpecificationsHandler := connect.NewUnaryHandler(
		FileServiceGetSpecificationsProcedure,
		svc.GetSpecifications,
		connect.WithSchema(fileServiceMethods.ByName("GetSpecifications")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetSpecificationHandler := connect.NewUnaryHandler(
		FileServiceGetSpecificationProcedure,
		svc.GetSpecification,
		connect.WithSchema(fileServiceMethods.ByName("GetSpecification")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceCreateLandingZoneSharedAccessSignatureHandler := connect.NewUnaryHandler(
		FileServiceCreateLandingZoneSharedAccessSignatureProcedure,
		svc.CreateLandingZoneSharedAccessSignature,
		connect.WithSchema(fileServiceMethods.ByName("CreateLandingZoneSharedAccessSignature")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetLandingZoneFilesHandler := connect.NewUnaryHandler(
		FileServiceGetLandingZoneFilesProcedure,
		svc.GetLandingZoneFiles,
		connect.WithSchema(fileServiceMethods.ByName("GetLandingZoneFiles")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceCreateFileGroupHandler := connect.NewUnaryHandler(
		FileServiceCreateFileGroupProcedure,
		svc.CreateFileGroup,
		connect.WithSchema(fileServiceMethods.ByName("CreateFileGroup")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceGetFileGroupsHandler := connect.NewUnaryHandler(
		FileServiceGetFileGroupsProcedure,
		svc.GetFileGroups,
		connect.WithSchema(fileServiceMethods.ByName("GetFileGroups")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceCreateSpecificationProcedure:
			fileServiceCreateSpecificationHandler.ServeHTTP(w, r)
		case FileServiceGetSpecificationsProcedure:
			fileServiceGetSpecificationsHandler.ServeHTTP(w, r)
		case FileServiceGetSpecificationProcedure:
			fileServiceGetSpecificationHandler.ServeHTTP(w, r)
		case FileServiceCreateLandingZoneSharedAccessSignatureProcedure:
			fileServiceCreateLandingZoneSharedAccessSignatureHandler.ServeHTTP(w, r)
		case FileServiceGetLandingZoneFilesProcedure:
			fileServiceGetLandingZoneFilesHandler.ServeHTTP(w, r)
		case FileServiceCreateFileGroupProcedure:
			fileServiceCreateFileGroupHandler.ServeHTTP(w, r)
		case FileServiceGetFileGroupsProcedure:
			fileServiceGetFileGroupsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) CreateSpecification(context.Context, *connect.Request[api.CreateSpecificationRequest]) (*connect.Response[api.CreateSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.CreateSpecification is not implemented"))
}

func (UnimplementedFileServiceHandler) GetSpecifications(context.Context, *connect.Request[api.GetSpecificationsRequest]) (*connect.Response[api.GetSpecificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.GetSpecifications is not implemented"))
}

func (UnimplementedFileServiceHandler) GetSpecification(context.Context, *connect.Request[api.GetSpecificationRequest]) (*connect.Response[api.GetSpecificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.GetSpecification is not implemented"))
}

func (UnimplementedFileServiceHandler) CreateLandingZoneSharedAccessSignature(context.Context, *connect.Request[api.CreateLandingZoneSharedAccessSignatureRequest]) (*connect.Response[api.CreateLandingZoneSharedAccessSignatureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.CreateLandingZoneSharedAccessSignature is not implemented"))
}

func (UnimplementedFileServiceHandler) GetLandingZoneFiles(context.Context, *connect.Request[api.GetLandingZoneFilesRequest]) (*connect.Response[api.GetLandingZoneFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.GetLandingZoneFiles is not implemented"))
}

func (UnimplementedFileServiceHandler) CreateFileGroup(context.Context, *connect.Request[api.CreateFileGroupRequest]) (*connect.Response[api.CreateFileGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.CreateFileGroup is not implemented"))
}

func (UnimplementedFileServiceHandler) GetFileGroups(context.Context, *connect.Request[api.GetFileGroupsRequest]) (*connect.Response[api.GetFileGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.FileService.GetFileGroups is not implemented"))
}
