// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/model.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/MorhafAlshibly/iunvi/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModelServiceName is the fully-qualified name of the ModelService service.
	ModelServiceName = "model.ModelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModelServiceGetRegistryTokenPasswordsProcedure is the fully-qualified name of the ModelService's
	// GetRegistryTokenPasswords RPC.
	ModelServiceGetRegistryTokenPasswordsProcedure = "/model.ModelService/GetRegistryTokenPasswords"
	// ModelServiceCreateRegistryTokenPasswordProcedure is the fully-qualified name of the
	// ModelService's CreateRegistryTokenPassword RPC.
	ModelServiceCreateRegistryTokenPasswordProcedure = "/model.ModelService/CreateRegistryTokenPassword"
	// ModelServiceGetImagesProcedure is the fully-qualified name of the ModelService's GetImages RPC.
	ModelServiceGetImagesProcedure = "/model.ModelService/GetImages"
	// ModelServiceCreateModelProcedure is the fully-qualified name of the ModelService's CreateModel
	// RPC.
	ModelServiceCreateModelProcedure = "/model.ModelService/CreateModel"
	// ModelServiceGetModelsProcedure is the fully-qualified name of the ModelService's GetModels RPC.
	ModelServiceGetModelsProcedure = "/model.ModelService/GetModels"
	// ModelServiceGetModelProcedure is the fully-qualified name of the ModelService's GetModel RPC.
	ModelServiceGetModelProcedure = "/model.ModelService/GetModel"
	// ModelServiceCreateModelRunProcedure is the fully-qualified name of the ModelService's
	// CreateModelRun RPC.
	ModelServiceCreateModelRunProcedure = "/model.ModelService/CreateModelRun"
	// ModelServiceGetModelRunsProcedure is the fully-qualified name of the ModelService's GetModelRuns
	// RPC.
	ModelServiceGetModelRunsProcedure = "/model.ModelService/GetModelRuns"
)

// ModelServiceClient is a client for the model.ModelService service.
type ModelServiceClient interface {
	GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error)
	CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error)
	GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error)
	CreateModel(context.Context, *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error)
	GetModels(context.Context, *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error)
	GetModel(context.Context, *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error)
	CreateModelRun(context.Context, *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error)
	GetModelRuns(context.Context, *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error)
}

// NewModelServiceClient constructs a client for the model.ModelService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	modelServiceMethods := api.File_api_model_proto.Services().ByName("ModelService").Methods()
	return &modelServiceClient{
		getRegistryTokenPasswords: connect.NewClient[api.GetRegistryTokenPasswordsRequest, api.GetRegistryTokenPasswordsResponse](
			httpClient,
			baseURL+ModelServiceGetRegistryTokenPasswordsProcedure,
			connect.WithSchema(modelServiceMethods.ByName("GetRegistryTokenPasswords")),
			connect.WithClientOptions(opts...),
		),
		createRegistryTokenPassword: connect.NewClient[api.CreateRegistryTokenPasswordRequest, api.CreateRegistryTokenPasswordResponse](
			httpClient,
			baseURL+ModelServiceCreateRegistryTokenPasswordProcedure,
			connect.WithSchema(modelServiceMethods.ByName("CreateRegistryTokenPassword")),
			connect.WithClientOptions(opts...),
		),
		getImages: connect.NewClient[api.GetImagesRequest, api.GetImagesResponse](
			httpClient,
			baseURL+ModelServiceGetImagesProcedure,
			connect.WithSchema(modelServiceMethods.ByName("GetImages")),
			connect.WithClientOptions(opts...),
		),
		createModel: connect.NewClient[api.CreateModelRequest, api.CreateModelResponse](
			httpClient,
			baseURL+ModelServiceCreateModelProcedure,
			connect.WithSchema(modelServiceMethods.ByName("CreateModel")),
			connect.WithClientOptions(opts...),
		),
		getModels: connect.NewClient[api.GetModelsRequest, api.GetModelsResponse](
			httpClient,
			baseURL+ModelServiceGetModelsProcedure,
			connect.WithSchema(modelServiceMethods.ByName("GetModels")),
			connect.WithClientOptions(opts...),
		),
		getModel: connect.NewClient[api.GetModelRequest, api.GetModelResponse](
			httpClient,
			baseURL+ModelServiceGetModelProcedure,
			connect.WithSchema(modelServiceMethods.ByName("GetModel")),
			connect.WithClientOptions(opts...),
		),
		createModelRun: connect.NewClient[api.CreateModelRunRequest, api.CreateModelRunResponse](
			httpClient,
			baseURL+ModelServiceCreateModelRunProcedure,
			connect.WithSchema(modelServiceMethods.ByName("CreateModelRun")),
			connect.WithClientOptions(opts...),
		),
		getModelRuns: connect.NewClient[api.GetModelRunsRequest, api.GetModelRunsResponse](
			httpClient,
			baseURL+ModelServiceGetModelRunsProcedure,
			connect.WithSchema(modelServiceMethods.ByName("GetModelRuns")),
			connect.WithClientOptions(opts...),
		),
	}
}

// modelServiceClient implements ModelServiceClient.
type modelServiceClient struct {
	getRegistryTokenPasswords   *connect.Client[api.GetRegistryTokenPasswordsRequest, api.GetRegistryTokenPasswordsResponse]
	createRegistryTokenPassword *connect.Client[api.CreateRegistryTokenPasswordRequest, api.CreateRegistryTokenPasswordResponse]
	getImages                   *connect.Client[api.GetImagesRequest, api.GetImagesResponse]
	createModel                 *connect.Client[api.CreateModelRequest, api.CreateModelResponse]
	getModels                   *connect.Client[api.GetModelsRequest, api.GetModelsResponse]
	getModel                    *connect.Client[api.GetModelRequest, api.GetModelResponse]
	createModelRun              *connect.Client[api.CreateModelRunRequest, api.CreateModelRunResponse]
	getModelRuns                *connect.Client[api.GetModelRunsRequest, api.GetModelRunsResponse]
}

// GetRegistryTokenPasswords calls model.ModelService.GetRegistryTokenPasswords.
func (c *modelServiceClient) GetRegistryTokenPasswords(ctx context.Context, req *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error) {
	return c.getRegistryTokenPasswords.CallUnary(ctx, req)
}

// CreateRegistryTokenPassword calls model.ModelService.CreateRegistryTokenPassword.
func (c *modelServiceClient) CreateRegistryTokenPassword(ctx context.Context, req *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error) {
	return c.createRegistryTokenPassword.CallUnary(ctx, req)
}

// GetImages calls model.ModelService.GetImages.
func (c *modelServiceClient) GetImages(ctx context.Context, req *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error) {
	return c.getImages.CallUnary(ctx, req)
}

// CreateModel calls model.ModelService.CreateModel.
func (c *modelServiceClient) CreateModel(ctx context.Context, req *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error) {
	return c.createModel.CallUnary(ctx, req)
}

// GetModels calls model.ModelService.GetModels.
func (c *modelServiceClient) GetModels(ctx context.Context, req *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error) {
	return c.getModels.CallUnary(ctx, req)
}

// GetModel calls model.ModelService.GetModel.
func (c *modelServiceClient) GetModel(ctx context.Context, req *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error) {
	return c.getModel.CallUnary(ctx, req)
}

// CreateModelRun calls model.ModelService.CreateModelRun.
func (c *modelServiceClient) CreateModelRun(ctx context.Context, req *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error) {
	return c.createModelRun.CallUnary(ctx, req)
}

// GetModelRuns calls model.ModelService.GetModelRuns.
func (c *modelServiceClient) GetModelRuns(ctx context.Context, req *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error) {
	return c.getModelRuns.CallUnary(ctx, req)
}

// ModelServiceHandler is an implementation of the model.ModelService service.
type ModelServiceHandler interface {
	GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error)
	CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error)
	GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error)
	CreateModel(context.Context, *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error)
	GetModels(context.Context, *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error)
	GetModel(context.Context, *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error)
	CreateModelRun(context.Context, *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error)
	GetModelRuns(context.Context, *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error)
}

// NewModelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModelServiceHandler(svc ModelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	modelServiceMethods := api.File_api_model_proto.Services().ByName("ModelService").Methods()
	modelServiceGetRegistryTokenPasswordsHandler := connect.NewUnaryHandler(
		ModelServiceGetRegistryTokenPasswordsProcedure,
		svc.GetRegistryTokenPasswords,
		connect.WithSchema(modelServiceMethods.ByName("GetRegistryTokenPasswords")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceCreateRegistryTokenPasswordHandler := connect.NewUnaryHandler(
		ModelServiceCreateRegistryTokenPasswordProcedure,
		svc.CreateRegistryTokenPassword,
		connect.WithSchema(modelServiceMethods.ByName("CreateRegistryTokenPassword")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceGetImagesHandler := connect.NewUnaryHandler(
		ModelServiceGetImagesProcedure,
		svc.GetImages,
		connect.WithSchema(modelServiceMethods.ByName("GetImages")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceCreateModelHandler := connect.NewUnaryHandler(
		ModelServiceCreateModelProcedure,
		svc.CreateModel,
		connect.WithSchema(modelServiceMethods.ByName("CreateModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceGetModelsHandler := connect.NewUnaryHandler(
		ModelServiceGetModelsProcedure,
		svc.GetModels,
		connect.WithSchema(modelServiceMethods.ByName("GetModels")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceGetModelHandler := connect.NewUnaryHandler(
		ModelServiceGetModelProcedure,
		svc.GetModel,
		connect.WithSchema(modelServiceMethods.ByName("GetModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceCreateModelRunHandler := connect.NewUnaryHandler(
		ModelServiceCreateModelRunProcedure,
		svc.CreateModelRun,
		connect.WithSchema(modelServiceMethods.ByName("CreateModelRun")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceGetModelRunsHandler := connect.NewUnaryHandler(
		ModelServiceGetModelRunsProcedure,
		svc.GetModelRuns,
		connect.WithSchema(modelServiceMethods.ByName("GetModelRuns")),
		connect.WithHandlerOptions(opts...),
	)
	return "/model.ModelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModelServiceGetRegistryTokenPasswordsProcedure:
			modelServiceGetRegistryTokenPasswordsHandler.ServeHTTP(w, r)
		case ModelServiceCreateRegistryTokenPasswordProcedure:
			modelServiceCreateRegistryTokenPasswordHandler.ServeHTTP(w, r)
		case ModelServiceGetImagesProcedure:
			modelServiceGetImagesHandler.ServeHTTP(w, r)
		case ModelServiceCreateModelProcedure:
			modelServiceCreateModelHandler.ServeHTTP(w, r)
		case ModelServiceGetModelsProcedure:
			modelServiceGetModelsHandler.ServeHTTP(w, r)
		case ModelServiceGetModelProcedure:
			modelServiceGetModelHandler.ServeHTTP(w, r)
		case ModelServiceCreateModelRunProcedure:
			modelServiceCreateModelRunHandler.ServeHTTP(w, r)
		case ModelServiceGetModelRunsProcedure:
			modelServiceGetModelRunsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModelServiceHandler struct{}

func (UnimplementedModelServiceHandler) GetRegistryTokenPasswords(context.Context, *connect.Request[api.GetRegistryTokenPasswordsRequest]) (*connect.Response[api.GetRegistryTokenPasswordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.GetRegistryTokenPasswords is not implemented"))
}

func (UnimplementedModelServiceHandler) CreateRegistryTokenPassword(context.Context, *connect.Request[api.CreateRegistryTokenPasswordRequest]) (*connect.Response[api.CreateRegistryTokenPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.CreateRegistryTokenPassword is not implemented"))
}

func (UnimplementedModelServiceHandler) GetImages(context.Context, *connect.Request[api.GetImagesRequest]) (*connect.Response[api.GetImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.GetImages is not implemented"))
}

func (UnimplementedModelServiceHandler) CreateModel(context.Context, *connect.Request[api.CreateModelRequest]) (*connect.Response[api.CreateModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.CreateModel is not implemented"))
}

func (UnimplementedModelServiceHandler) GetModels(context.Context, *connect.Request[api.GetModelsRequest]) (*connect.Response[api.GetModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.GetModels is not implemented"))
}

func (UnimplementedModelServiceHandler) GetModel(context.Context, *connect.Request[api.GetModelRequest]) (*connect.Response[api.GetModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.GetModel is not implemented"))
}

func (UnimplementedModelServiceHandler) CreateModelRun(context.Context, *connect.Request[api.CreateModelRunRequest]) (*connect.Response[api.CreateModelRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.CreateModelRun is not implemented"))
}

func (UnimplementedModelServiceHandler) GetModelRuns(context.Context, *connect.Request[api.GetModelRunsRequest]) (*connect.Response[api.GetModelRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("model.ModelService.GetModelRuns is not implemented"))
}
